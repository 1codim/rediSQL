{
    "docs": [
        {
            "location": "/",
            "text": "RediSQL\n\n\nRediSQL\n is a Redis module that embeds a fully functional SQLite database.\n\n\nMotivation\n\n\nThe main motivation behind the project is to provide a quick and hands-off environment to store structured data.\n\n\nIt also turns out that RediSQL is a great way to cache your content and data in a more structured way.\n\n\nAnyway, the main history and motivation of the project are explained \nin this page.\n\n\nSustainable Open Source\n\n\nThe project is based on the idea of sustainable Open Source.\n\n\nThe project provides two versions, an open source one, which is enough for most simple projects, and a PRO version that provides features required from companies and enterprises.\n\n\nOverview\n\n\nIn this section, we are going to explore the main concepts in the module.\n\n\nThere is another section of the website, \nthe reference\n, that explore every single command that the module provides giving a deeper explanation of every detail.\n\n\nDatabases\n\n\nRediSQL provides the concept of database.\n\n\nIt is possible to create a new database with the command \nREDISQL.CREATE_DB\n.\n\n\nThe database is associated with a Redis key and so it is possible to have multiple SQL databases in a single Redis instance.\n\n\nAlso, it is possible to use in-memory database, which is the default, or databases backed by a real file. In-memory databases are generally a little faster but they are limited by the amount of memory your server has. Database backed by files are a little slower but they can grow basically indefinitely.\n\n\nExec\n\n\nREDISQL.EXEC\n is the command that let you execute command against a SQL database.\n\n\nIt is useful when you are testing the module or when you are changing the settings of the databases through SQLite \nPRAGMA\ns.\n\n\nHowever, I would not suggest to use them in production since there are better tools like \nStatements\n.\n\n\nStatements\n\n\nQueries and statements can be precompiled and stores inside the Redis key in order to provide a faster execution and more agility in your application.\n\n\nWhen you execute an SQLite query, the text is compiled to a binary code, this binary code is then executed against the database and the result provide an answer.\nThe phase of compilation can be quite expensive, but if you always execute the same statements (think about \ninserts\n), it can be avoided.\n\n\nWhen you use \nREDISQL.CREATE_STATEMENT\n your statement is compiled, then when you execute it using \nREDISQL.EXEC_STATEMENT\n it is not re-compiled but we use the pre-compiled one. It seems a trivial change but it will really speed up some workload.\n\n\nStatements can also be used as an interface for different application using the same RediSQL instance.\n\n\nOnce you define the interface of the statement and its behavior, then you are free to change it's implementation while maintaining all the legacy code working.\nThis is quite useful especially if you have several services using the same RediSQL instance.\n\n\nPersistency\n\n\nThe module in the community version implements only RDB. However, the PRO version provides also AOF and replication.\n\n\nRDB\n\n\nThe module implements RDB persistency.\n\n\nWhen Redis starts to save the RDB file the status of the database get serialized and written, along with all the other information, in the RDB file.\n\n\nAOF\n\n\nAOF replication is provided only in the PRO edition.\n\n\nAt the moment all the commands are replicated, this is quite a waste and we are moving to replicate only the commands that actually modify the codebase.\n\n\nWith AOF replication you also get instance replication that allows replicating the same dataset into different Redis instances.",
            "title": "Overview"
        },
        {
            "location": "/#redisql",
            "text": "RediSQL  is a Redis module that embeds a fully functional SQLite database.",
            "title": "RediSQL"
        },
        {
            "location": "/#motivation",
            "text": "The main motivation behind the project is to provide a quick and hands-off environment to store structured data.  It also turns out that RediSQL is a great way to cache your content and data in a more structured way.  Anyway, the main history and motivation of the project are explained  in this page.",
            "title": "Motivation"
        },
        {
            "location": "/#sustainable-open-source",
            "text": "The project is based on the idea of sustainable Open Source.  The project provides two versions, an open source one, which is enough for most simple projects, and a PRO version that provides features required from companies and enterprises.",
            "title": "Sustainable Open Source"
        },
        {
            "location": "/#overview",
            "text": "In this section, we are going to explore the main concepts in the module.  There is another section of the website,  the reference , that explore every single command that the module provides giving a deeper explanation of every detail.",
            "title": "Overview"
        },
        {
            "location": "/#databases",
            "text": "RediSQL provides the concept of database.  It is possible to create a new database with the command  REDISQL.CREATE_DB .  The database is associated with a Redis key and so it is possible to have multiple SQL databases in a single Redis instance.  Also, it is possible to use in-memory database, which is the default, or databases backed by a real file. In-memory databases are generally a little faster but they are limited by the amount of memory your server has. Database backed by files are a little slower but they can grow basically indefinitely.",
            "title": "Databases"
        },
        {
            "location": "/#exec",
            "text": "REDISQL.EXEC  is the command that let you execute command against a SQL database.  It is useful when you are testing the module or when you are changing the settings of the databases through SQLite  PRAGMA s.  However, I would not suggest to use them in production since there are better tools like  Statements .",
            "title": "Exec"
        },
        {
            "location": "/#statements",
            "text": "Queries and statements can be precompiled and stores inside the Redis key in order to provide a faster execution and more agility in your application.  When you execute an SQLite query, the text is compiled to a binary code, this binary code is then executed against the database and the result provide an answer.\nThe phase of compilation can be quite expensive, but if you always execute the same statements (think about  inserts ), it can be avoided.  When you use  REDISQL.CREATE_STATEMENT  your statement is compiled, then when you execute it using  REDISQL.EXEC_STATEMENT  it is not re-compiled but we use the pre-compiled one. It seems a trivial change but it will really speed up some workload.  Statements can also be used as an interface for different application using the same RediSQL instance.  Once you define the interface of the statement and its behavior, then you are free to change it's implementation while maintaining all the legacy code working.\nThis is quite useful especially if you have several services using the same RediSQL instance.",
            "title": "Statements"
        },
        {
            "location": "/#persistency",
            "text": "The module in the community version implements only RDB. However, the PRO version provides also AOF and replication.",
            "title": "Persistency"
        },
        {
            "location": "/#rdb",
            "text": "The module implements RDB persistency.  When Redis starts to save the RDB file the status of the database get serialized and written, along with all the other information, in the RDB file.",
            "title": "RDB"
        },
        {
            "location": "/#aof",
            "text": "AOF replication is provided only in the PRO edition.  At the moment all the commands are replicated, this is quite a waste and we are moving to replicate only the commands that actually modify the codebase.  With AOF replication you also get instance replication that allows replicating the same dataset into different Redis instances.",
            "title": "AOF"
        },
        {
            "location": "/references/",
            "text": "References\n\n\nThis document explains all the API that RediSQL provide to the users.\n\n\nFor each command, it exposes first the name and then the syntax and finally a brief explanation of what is going on inside the code.\n\n\nWhere is possible it provides also an estimate of the complexity since we are talking about databases not all queries have the same time and spatial complexity.\n\n\nFinally, if it is appropriate the document also provides several references to external material that the interested reader can use to understand better the dynamics of every and each command.\n\n\nREDISQL.CREATE_DB\n\n\nREDISQL.CREATE_DB db_key [path]\n\n\nThis command creates a new DB and associates it with the key.\n\n\nThe path argument is optional and, if provided is the file that SQLite will use.\nIt can be an existing SQLite file or it can be a not existing file.\n\n\nIf the file actually exists and if it is a regular SQLite file that database will be used.\nIf the file does not exist a new file will be created.\n\n\nIf the path is not provided it will open an in-memory database. Not providing a path is equivalent to provide the special string \n:memory:\n as path argument.\n\n\nAfter opening the database it inserts metadata into it and then starts a thread loop.\n\n\nComplexity\n: O(1), it means constant, it does not necessarily mean \nfast\n. However is fast enough for any use case facing human users (eg create a new database for every user logging in a website.)\n\n\nSee also\n: \n\n\n\n\nSQLite \nsqlite3_open_v2\n\n\n\n\nDEL\n\n\nDEL db_key [key ...]\n\n\nThis command is a generic command from Redis.\n\n\nIt eliminates keys from Redis itself, as well if the key is a RediSQL database create with \nREDISQL.CREATE_DB\n it will eliminate the SQLite database, stop the thread loop and clean up everything left.\n\n\nIf the database is backed by a file the file will be close.\n\n\nComplexity\n: DEL is O(N) on the number of keys, if you are only eliminating the key associated with the SQLite database will be constant, O(1).\n\n\nSee also\n: \n\n\n\n\nSQLite \nsqlite3_close\n\n\nRedis \nDEL\n\n\n\n\nREDISQL.EXEC\n\n\nREDISQL.EXEC db_key \"statement\"\n\n\nThis command takes as input a Redis key created with \nREDISQL.CREATE_DB\n and a statement string.\n\n\nInternally it transform the string into a \nsqlite statement\n using \nsqlite3_prepare_v2\n, execute it against the database, \nsqlite3_step\n, and finally returns the results to the client.\n\n\nThe compilation of the string into a statement and its execution happens in a different thread from the one used by Redis and so this command has a minimum impact on the overall Redis performance, however, it does block the client.\n\n\nThis command is quite useful to execute \nPRAGMA Statements\n, for normal operations against the database is suggested to use \nSTATEMENTS\n.\n\n\nAlso, remember that there is only a single thread for database, execution of multiple \nREDISQL.EXEC\n against the same database will result in a serialization of the executions, one will be executed before the others.\n\n\nComplexity\n: It depends entirely on the statement string. The use of a single thread for database is been chosen after several tests where the single thread configuration was faster than a multi-thread one. This is true in a write-intensive application and in a mixed write/read application.\n\n\nSee also\n:\n\n\n\n\nSQLite \nsqlite3_prepare_v2\n\n\nSQLite \nstatement\n aka \nsqlite3_stmt\n\n\nSQLite \nsqlite3_step\n\n\nSQLite \nPRAGMA\ns\n\n\nRedis Blocking Command\n\n\n\n\nREDISQL.CREATE_STATEMENT\n\n\nREDISQL.CREATE_STATEMENT db_key stmt_identifier \"statement\"\n\n\nThis command compiles a statement string into a \nsqlite statement\n and associate such statement to an identifier.\n\n\nUsing this command you can insert parameters using the special symbol \n?NNN\n, those parameters will be bind to the statements when you are executing the statement itself.\n\n\nFor now only the \n?NNN\n syntax is supported, where \nN\n is a digit (Ex. \n?1\n, \n?2\n, \n?3\n ...)\n\n\nThis command does not execute anything against the database, but simply store the sqlite statements into a dictionary associated with the identifier provided (\nstmt_identifier\n). Then it stores the information regarding the statement in the metadata table in order to provide a simple way to restore also the statements.\n\n\nThe statement is associated with a database, a statement created for one database cannot be used for another database, you need to create a different one. This allows a simple and fast way to provide persistence.\n\n\nYou can execute the statement with \nREDISQL.EXEC_STATEMENT\n.\n\n\nYou cannot overwrite a statement using this command.\n\n\nIf you need to change the implementation of a statement you have two options:\n\n\n\n\nDelete the statement using \nREDISQL.DELETE_STATEMENT\n and the create a new one.\n\n\nUse \nREDISQL.UPDATE_STATEMENT\n\n\n\n\nSuppose that a service needs a particular statement to be defined in order to work, this safety measure allows the users to simply go ahead, try to create it, and in case catch the error.\n\n\nAlso, this command is not blocking, meaning that all the work happens in a separate thread respect the redis one.\n\n\nPlease keep in mind that the parameters should be named in order and that there should not be any gap.\n\n\nINSERT INTO foo VALUES(?1, ?2, ?3); -- this one is fine and we work as you expect\n\nINSERT INTO foo VALUES(?1, ?123, ?564); -- this one will be more problematic, and you should avoid it\n\n\n\n\nKeep in mind that SQLite start to count the bounding parameters from 1 and not from 0, using \n?0\n is an error.\n\n\nComplexity\n: If we assume that the time necessary to compile a string into a sqlite statement is constant, overall the complexity is O(1), again constant, not necessarily \nfast\n.\n\n\nSee also\n:\n\n\n\n\nSQLite \nsqlite3_prepare_v2\n\n\nSQLite \nstatement\n aka \nsqlite3_stmt\n\n\nSQLite bindings, \nsqlite3_bind_text\n\n\nREDISQL.EXEC_STATEMENT\n\n\nREDISQL.DELETE_STATEMENT\n\n\nREDISQL.UPDATE_STATEMENT\n\n\nRedis Blocking Command\n\n\n\n\nREDISQL.EXEC_STATEMENT\n\n\nREDISQL.EXEC_STATEMENT db_key stmt_identifier [binding_parameters ...]\n\n\nThis command binds all the parameters to the statement created using \nREDISQL.CREATE_STATEMENT\n and identified by \nstmt_identifier\n. Then the module executes the statement against the database associated to \ndb_key\n.\n\n\nFor each parameter in the query of the form \n?nnn\n the engine will look for the \nnnn-th\n binding_parameters.\nSo if the statements is from the following query:\n\n\nINSERT INTO foo VALUES(?1, ?2, ?3);\n\n\n\n\nYou will only need to provide 3 parameters and they will be bound, in order to \n?1\n, \n?2\n and \n?3\n.\n\n\nIf your statements looks like this:\n\n\nINSERT INTO foo VALUES(?1, ?123, ?564);\n\n\n\n\nYou will need to provide 564 parameters and only the first, the 123-rd and the 564-th will be considered.\n\n\nSQLite starts to count the binding parameters from 0, not from 1. Using \n?0\n is an error.\n\n\nRedis works using a text protocol, all the arguments are encoded as text, hence the module is forced to use the procedure \nsqlite3_bind_text\n, however, SQLite is smart enough to recognize numbers and treat them correctly. Numbers will be treated as numbers and text will be treated as text.\n\n\nFinally, once completed the binding part the statement is executed and its result is returned to the client.\n\n\nThis command as well is not blocking, all the work happens in a different thread from the one of Redis.\n\n\nComplexity\n: The complexity to retrieve and to bind the parameters is roughly constant for any practical purpose, however, the overall complexity will be dominated by the time to execute the query.\n\n\nSee also\n:\n\n\n\n\nSQLite \nstatement\n aka \nsqlite3_stmt\n\n\nSQLite bindings, \nsqlite3_bind_text\n\n\nREDISQL.CREATE_STATEMENT\n\n\nRedis Blocking Command\n\n\n\n\nREDISQL.DELETE_STATEMENT\n\n\nREDISQL.DELETE_STATEMENT db_key stmt_identifier\n\n\nThis command eliminates a statement from the database.\n\n\nIt first looks it up into the internal hash table, if it finds the statement the command removes it from the internal hash table and then remove it from an internal SQLite table.\n\n\nAlso, this command is not blocking and work in a different thread from the main Redis one.\n\n\nComplexity\n: The complexity is constant and it can be considered \nfast\n for most practical application.\n\n\nSee also\n:\n\n\n\n\nSQLite \nstatement\n aka \nsqlite3_stmt\n\n\nREDISQL.CREATE_STATEMENT\n\n\nREDISQL.EXEC_STATEMENT\n\n\nREDISQL.UPDATE_STATEMENT\n\n\nRedis Blocking Command\n\n\n\n\nREDISQL.UPDATE_STATEMENT\n\n\nREDISQL.UPDATE_STATEMENT db_key stmt_identifier \"statement\"\n\n\nThe command update and \nexisting\n statement changing its internal implementation to the one provide as string.\n\n\nIf the statement does not exist the command will fail and return an error, again this is a safety measure, you must be completely aware that you are changing the implementation of a statement and updating a not existing statement or creating an existing one will result in an error.\n\n\nInternally the command starts checking if the statement is already defined, then it tries to compile the string into a \nsqlite3_stmt\n and if everything went right it finally updates the metadata table and finally returns to the client.\n\n\nThis command is not blocking as well.\n\n\nComplexity\n: The complexity is constant and it can be considered \nfast\n for most practical application.\n\n\nSee also\n:\n\n\n\n\nSQLite \nstatement\n aka \nsqlite3_stmt\n\n\nREDISQL.CREATE_STATEMENT\n\n\nREDISQL.EXEC_STATEMENT\n\n\nREDISQL.DELETE_STATEMENT\n\n\nRedis Blocking Command",
            "title": "References"
        },
        {
            "location": "/references/#references",
            "text": "This document explains all the API that RediSQL provide to the users.  For each command, it exposes first the name and then the syntax and finally a brief explanation of what is going on inside the code.  Where is possible it provides also an estimate of the complexity since we are talking about databases not all queries have the same time and spatial complexity.  Finally, if it is appropriate the document also provides several references to external material that the interested reader can use to understand better the dynamics of every and each command.",
            "title": "References"
        },
        {
            "location": "/references/#redisqlcreate_db",
            "text": "REDISQL.CREATE_DB db_key [path]  This command creates a new DB and associates it with the key.  The path argument is optional and, if provided is the file that SQLite will use.\nIt can be an existing SQLite file or it can be a not existing file.  If the file actually exists and if it is a regular SQLite file that database will be used.\nIf the file does not exist a new file will be created.  If the path is not provided it will open an in-memory database. Not providing a path is equivalent to provide the special string  :memory:  as path argument.  After opening the database it inserts metadata into it and then starts a thread loop.  Complexity : O(1), it means constant, it does not necessarily mean  fast . However is fast enough for any use case facing human users (eg create a new database for every user logging in a website.)  See also :    SQLite  sqlite3_open_v2",
            "title": "REDISQL.CREATE_DB"
        },
        {
            "location": "/references/#del",
            "text": "DEL db_key [key ...]  This command is a generic command from Redis.  It eliminates keys from Redis itself, as well if the key is a RediSQL database create with  REDISQL.CREATE_DB  it will eliminate the SQLite database, stop the thread loop and clean up everything left.  If the database is backed by a file the file will be close.  Complexity : DEL is O(N) on the number of keys, if you are only eliminating the key associated with the SQLite database will be constant, O(1).  See also :    SQLite  sqlite3_close  Redis  DEL",
            "title": "DEL"
        },
        {
            "location": "/references/#redisqlexec",
            "text": "REDISQL.EXEC db_key \"statement\"  This command takes as input a Redis key created with  REDISQL.CREATE_DB  and a statement string.  Internally it transform the string into a  sqlite statement  using  sqlite3_prepare_v2 , execute it against the database,  sqlite3_step , and finally returns the results to the client.  The compilation of the string into a statement and its execution happens in a different thread from the one used by Redis and so this command has a minimum impact on the overall Redis performance, however, it does block the client.  This command is quite useful to execute  PRAGMA Statements , for normal operations against the database is suggested to use  STATEMENTS .  Also, remember that there is only a single thread for database, execution of multiple  REDISQL.EXEC  against the same database will result in a serialization of the executions, one will be executed before the others.  Complexity : It depends entirely on the statement string. The use of a single thread for database is been chosen after several tests where the single thread configuration was faster than a multi-thread one. This is true in a write-intensive application and in a mixed write/read application.  See also :   SQLite  sqlite3_prepare_v2  SQLite  statement  aka  sqlite3_stmt  SQLite  sqlite3_step  SQLite  PRAGMA s  Redis Blocking Command",
            "title": "REDISQL.EXEC"
        },
        {
            "location": "/references/#redisqlcreate_statement",
            "text": "REDISQL.CREATE_STATEMENT db_key stmt_identifier \"statement\"  This command compiles a statement string into a  sqlite statement  and associate such statement to an identifier.  Using this command you can insert parameters using the special symbol  ?NNN , those parameters will be bind to the statements when you are executing the statement itself.  For now only the  ?NNN  syntax is supported, where  N  is a digit (Ex.  ?1 ,  ?2 ,  ?3  ...)  This command does not execute anything against the database, but simply store the sqlite statements into a dictionary associated with the identifier provided ( stmt_identifier ). Then it stores the information regarding the statement in the metadata table in order to provide a simple way to restore also the statements.  The statement is associated with a database, a statement created for one database cannot be used for another database, you need to create a different one. This allows a simple and fast way to provide persistence.  You can execute the statement with  REDISQL.EXEC_STATEMENT .  You cannot overwrite a statement using this command.  If you need to change the implementation of a statement you have two options:   Delete the statement using  REDISQL.DELETE_STATEMENT  and the create a new one.  Use  REDISQL.UPDATE_STATEMENT   Suppose that a service needs a particular statement to be defined in order to work, this safety measure allows the users to simply go ahead, try to create it, and in case catch the error.  Also, this command is not blocking, meaning that all the work happens in a separate thread respect the redis one.  Please keep in mind that the parameters should be named in order and that there should not be any gap.  INSERT INTO foo VALUES(?1, ?2, ?3); -- this one is fine and we work as you expect\n\nINSERT INTO foo VALUES(?1, ?123, ?564); -- this one will be more problematic, and you should avoid it  Keep in mind that SQLite start to count the bounding parameters from 1 and not from 0, using  ?0  is an error.  Complexity : If we assume that the time necessary to compile a string into a sqlite statement is constant, overall the complexity is O(1), again constant, not necessarily  fast .  See also :   SQLite  sqlite3_prepare_v2  SQLite  statement  aka  sqlite3_stmt  SQLite bindings,  sqlite3_bind_text  REDISQL.EXEC_STATEMENT  REDISQL.DELETE_STATEMENT  REDISQL.UPDATE_STATEMENT  Redis Blocking Command",
            "title": "REDISQL.CREATE_STATEMENT"
        },
        {
            "location": "/references/#redisqlexec_statement",
            "text": "REDISQL.EXEC_STATEMENT db_key stmt_identifier [binding_parameters ...]  This command binds all the parameters to the statement created using  REDISQL.CREATE_STATEMENT  and identified by  stmt_identifier . Then the module executes the statement against the database associated to  db_key .  For each parameter in the query of the form  ?nnn  the engine will look for the  nnn-th  binding_parameters.\nSo if the statements is from the following query:  INSERT INTO foo VALUES(?1, ?2, ?3);  You will only need to provide 3 parameters and they will be bound, in order to  ?1 ,  ?2  and  ?3 .  If your statements looks like this:  INSERT INTO foo VALUES(?1, ?123, ?564);  You will need to provide 564 parameters and only the first, the 123-rd and the 564-th will be considered.  SQLite starts to count the binding parameters from 0, not from 1. Using  ?0  is an error.  Redis works using a text protocol, all the arguments are encoded as text, hence the module is forced to use the procedure  sqlite3_bind_text , however, SQLite is smart enough to recognize numbers and treat them correctly. Numbers will be treated as numbers and text will be treated as text.  Finally, once completed the binding part the statement is executed and its result is returned to the client.  This command as well is not blocking, all the work happens in a different thread from the one of Redis.  Complexity : The complexity to retrieve and to bind the parameters is roughly constant for any practical purpose, however, the overall complexity will be dominated by the time to execute the query.  See also :   SQLite  statement  aka  sqlite3_stmt  SQLite bindings,  sqlite3_bind_text  REDISQL.CREATE_STATEMENT  Redis Blocking Command",
            "title": "REDISQL.EXEC_STATEMENT"
        },
        {
            "location": "/references/#redisqldelete_statement",
            "text": "REDISQL.DELETE_STATEMENT db_key stmt_identifier  This command eliminates a statement from the database.  It first looks it up into the internal hash table, if it finds the statement the command removes it from the internal hash table and then remove it from an internal SQLite table.  Also, this command is not blocking and work in a different thread from the main Redis one.  Complexity : The complexity is constant and it can be considered  fast  for most practical application.  See also :   SQLite  statement  aka  sqlite3_stmt  REDISQL.CREATE_STATEMENT  REDISQL.EXEC_STATEMENT  REDISQL.UPDATE_STATEMENT  Redis Blocking Command",
            "title": "REDISQL.DELETE_STATEMENT"
        },
        {
            "location": "/references/#redisqlupdate_statement",
            "text": "REDISQL.UPDATE_STATEMENT db_key stmt_identifier \"statement\"  The command update and  existing  statement changing its internal implementation to the one provide as string.  If the statement does not exist the command will fail and return an error, again this is a safety measure, you must be completely aware that you are changing the implementation of a statement and updating a not existing statement or creating an existing one will result in an error.  Internally the command starts checking if the statement is already defined, then it tries to compile the string into a  sqlite3_stmt  and if everything went right it finally updates the metadata table and finally returns to the client.  This command is not blocking as well.  Complexity : The complexity is constant and it can be considered  fast  for most practical application.  See also :   SQLite  statement  aka  sqlite3_stmt  REDISQL.CREATE_STATEMENT  REDISQL.EXEC_STATEMENT  REDISQL.DELETE_STATEMENT  Redis Blocking Command",
            "title": "REDISQL.UPDATE_STATEMENT"
        },
        {
            "location": "/motivations/",
            "text": "Motivation\n\n\nThis document explains the motivations behind this redis module.\n\n\nMy personal use case\n\n\nAs a lot of different open source projects, this module is born out of a personal issue that I was trying to solve.\n\n\nI was developing a very simple application using a microservice architecture, each service needed to be stopped and updated at will so it was mandatory to store all the state in an external application.\n\n\nRedis was perfect for this use case since it is very simple to operate, you could get away simply setting your level of persistence, extremely stable, very performant and there are bindings ready for basically any programming language.\n\n\nHowever, the application started to grow in terms of complexity and soon I realized that having a small SQL engine would have saved me a lot of complexity in my code while delivering better performances.\n\n\nAt that time I had only the following options:\n\n\n\n\nKeep all the state in Redis, implementing by hand, or using some external library, whatever SQL-like transformation I needed.\n\n\nBring in another piece inside my architecture, namely an SQL database.\n\n\n\n\nFor some project it may be worth to immediately include an external dependency in the form of a database, but it brings up the cost of operating the infrastructure.\n\n\nOperating a database is quite complex, operating it in any organization costs in terms of human resources or, if you use managed services, directly in terms of money.\n\n\nAlso, since all my state was kept only in Redis, introducing another \"source of truth\" would have complicated the code base.\n\n\nMy project definitely didn't need the whole computing power of Postgresql or of MySQL, I didn't need the burden of operating it and definitely I wasn't in the condition to pay for managed services.\n\n\nWhy RediSQL\n\n\nThe goal of the module is to create a third alternative to the two mentioned above.\n\n\nI wanted this alternative to be as low maintenance as possible, keep a great level of security on the persistency of the data stored and to be easily deployed in most architectures.\n\n\nSQLite easily checks both the low maintenance and the high level of persistency requirements. Redis is already deployed in most architectures, either as a cache layer or as a database.\n\n\nFinally, merging the two project was just made possible by the introduction of the Redis modules.\n\n\nHence, RediSQL was born.\n\n\nPossible uses\n\n\nRediSQL has been thought to be used as an in-memory SQL database, shared between multiple (micro-)services.\n\n\nHowever, RediSQL inherits the persistency capabilities of Redis, supporting RDB and AOF, and of SQLite, with the possibility to write directly on disk.\n\n\nMoreover, it basically never uses the main thread of Redis, hence it will not affect the performance of Redis itself.\n\n\nThis makes RediSQL a reasonable solution to store and persist data in a small to a medium modern project.",
            "title": "Motivations"
        },
        {
            "location": "/motivations/#motivation",
            "text": "This document explains the motivations behind this redis module.",
            "title": "Motivation"
        },
        {
            "location": "/motivations/#my-personal-use-case",
            "text": "As a lot of different open source projects, this module is born out of a personal issue that I was trying to solve.  I was developing a very simple application using a microservice architecture, each service needed to be stopped and updated at will so it was mandatory to store all the state in an external application.  Redis was perfect for this use case since it is very simple to operate, you could get away simply setting your level of persistence, extremely stable, very performant and there are bindings ready for basically any programming language.  However, the application started to grow in terms of complexity and soon I realized that having a small SQL engine would have saved me a lot of complexity in my code while delivering better performances.  At that time I had only the following options:   Keep all the state in Redis, implementing by hand, or using some external library, whatever SQL-like transformation I needed.  Bring in another piece inside my architecture, namely an SQL database.   For some project it may be worth to immediately include an external dependency in the form of a database, but it brings up the cost of operating the infrastructure.  Operating a database is quite complex, operating it in any organization costs in terms of human resources or, if you use managed services, directly in terms of money.  Also, since all my state was kept only in Redis, introducing another \"source of truth\" would have complicated the code base.  My project definitely didn't need the whole computing power of Postgresql or of MySQL, I didn't need the burden of operating it and definitely I wasn't in the condition to pay for managed services.",
            "title": "My personal use case"
        },
        {
            "location": "/motivations/#why-redisql",
            "text": "The goal of the module is to create a third alternative to the two mentioned above.  I wanted this alternative to be as low maintenance as possible, keep a great level of security on the persistency of the data stored and to be easily deployed in most architectures.  SQLite easily checks both the low maintenance and the high level of persistency requirements. Redis is already deployed in most architectures, either as a cache layer or as a database.  Finally, merging the two project was just made possible by the introduction of the Redis modules.  Hence, RediSQL was born.",
            "title": "Why RediSQL"
        },
        {
            "location": "/motivations/#possible-uses",
            "text": "RediSQL has been thought to be used as an in-memory SQL database, shared between multiple (micro-)services.  However, RediSQL inherits the persistency capabilities of Redis, supporting RDB and AOF, and of SQLite, with the possibility to write directly on disk.  Moreover, it basically never uses the main thread of Redis, hence it will not affect the performance of Redis itself.  This makes RediSQL a reasonable solution to store and persist data in a small to a medium modern project.",
            "title": "Possible uses"
        }
    ]
}